@using System;
@using yugioh_card_db.Models;
@using Newtonsoft.Json;
@using System.Net.Http;
@using System.Threading.Tasks;

@inject CardService CardService;

@page "/cards"

<h3>AllCardList</h3>
@if (allCards is null)
{
    <p>Loading...</p>
}
else
{
    <ul>
        @foreach (var card in cardsToDisplay)
        { 
            <li>
                <h4>@card.Name</h4>
                <p>@card.Description</p>
                <img src="@card.ImageLink" alt="@card.Name" />
            </li>
        }
    </ul>


    <div class="pagination-controls">
        <button @onclick="PreviousPage" disabled="@(!HasPreviousPage)">Previous</button>
        <span>Page @currentPage of @totalPages</span>
        <button @onclick="NextPage" disabled="@(!HasNextPage)">Next</button>
    </div>
}

@code {
    private List<CardModel> allCards;
    private List<CardModel> cardsToDisplay;//only cards for current page
    private int currentPage = 1;
    private int pageSize = 10; //number of cards per page
    private int totalPages = 0;


    protected override async Task OnInitializedAsync()
    {

        allCards = await CardService.GetCardsAsync();
        //calculate total number of pages
        totalPages = (int)Math.Ceiling((double)allCards.Count / pageSize);
        //load first page
        LoadCardsForCurrentPage();
    }

    private void LoadCardsForCurrentPage()
    {
        //calc the range of cards to display for the current page
        cardsToDisplay = allCards.Skip( (currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    private bool HasPreviousPage => currentPage > 1;
    private bool HasNextPage => currentPage < totalPages;

    private void PreviousPage()
    {
        if (HasPreviousPage)
        {
            currentPage--;
            LoadCardsForCurrentPage();
        }
    }

    private void NextPage()
    {
        if (HasNextPage)
        {
            currentPage++;
            LoadCardsForCurrentPage();
        }
    }

}
